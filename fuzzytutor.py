# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pDM0qJIszAaL6M7he4A1j030ute3P9ys
"""

pip install numpy scikit-fuzzy matplotlib

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt

# Student Answer Analysis

# Define linguistic variables and fuzzy sets for student answer analysis
accuracy = ctrl.Antecedent(np.arange(0, 101, 1), 'accuracy')
feedback = ctrl.Consequent(np.arange(0, 101, 1), 'feedback')

# Membership functions for accuracy
accuracy['low'] = fuzz.trimf(accuracy.universe, [0, 0, 50])
accuracy['medium'] = fuzz.trimf(accuracy.universe, [0, 50, 100])
accuracy['high'] = fuzz.trimf(accuracy.universe, [50, 100, 100])

# Membership functions for feedback
feedback['low'] = fuzz.trimf(feedback.universe, [0, 0, 50])
feedback['medium'] = fuzz.trimf(feedback.universe, [0, 50, 100])
feedback['high'] = fuzz.trimf(feedback.universe, [50, 100, 100])

# Define fuzzy rules for student answer analysis
rule1 = ctrl.Rule(accuracy['low'], feedback['low'])
rule2 = ctrl.Rule(accuracy['medium'], feedback['medium'])
rule3 = ctrl.Rule(accuracy['high'], feedback['high'])

# Create fuzzy control system for student answer analysis
feedback_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
feedback_system = ctrl.ControlSystemSimulation(feedback_ctrl)

# Set sample input based on the student's answer
keywords = [
    "indispensable", "process", "fuzzy logic systems", "convert", "precise",
    "decisions", "implementing actions", "input variables", "fuzzy sets",
    "system rules", "produce", "applied", "yield", "singular", "utilized",
    "practical applications", "control systems"
]

# Calculate accuracy based on the presence of keywords
accuracy_percentage = (sum(keyword in keywords for keyword in keywords) / len(keywords)) * 100

# Set linguistic variables based on accuracy for student answer analysis
feedback_system.input['accuracy'] = accuracy_percentage

# Compute the result for student answer analysis
feedback_system.compute()

# Get the defuzzified output for student answer analysis
feedback_level = feedback_system.output['feedback']

# Print the results for student answer analysis
print("Student Answer Analysis:")
print(f"Accuracy Percentage: {accuracy_percentage:.2f}%")
print(f"Feedback Level: {feedback_level:.2f}%")

# Interpret the feedback level for student answer analysis
if feedback_level <= 30:
    print("Feedback: Poor. Consider reviewing the topic thoroughly.")
elif 30 < feedback_level <= 70:
    print("Feedback: Average. Some improvement is needed. Review specific concepts.")
else:
    print("Feedback: Good. Your answer demonstrates a solid understanding of the topic.")

# Performance Evaluation

# Define linguistic variables and fuzzy sets for performance evaluation
exam_content = ctrl.Antecedent(np.arange(0, 101, 1), 'exam_content')
time_management = ctrl.Antecedent(np.arange(0, 101, 1), 'time_management')
goal_setting = ctrl.Antecedent(np.arange(0, 101, 1), 'goal_setting')
performance = ctrl.Consequent(np.arange(0, 101, 1), 'performance')

# Membership functions for performance evaluation
# (Define membership functions for exam_content, time_management, goal_setting)

# Rules for performance evaluation
# (Define rules for performance evaluation using these Antecedents and Consequent)

# Control System for performance evaluation
performance_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
performance_sim = ctrl.ControlSystemSimulation(performance_ctrl)



# Compute for performance evaluation
performance_sim.compute()



# Visualization for performance evaluation
# (Plot the membership functions and visualization for performance evaluation)
# (exam_content.view(), time_management.view(), goal_setting.view(), performance.view(sim=performance_sim))
# (plt.show() for plotting)